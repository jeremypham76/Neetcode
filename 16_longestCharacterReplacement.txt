class Solution(object):
    def characterReplacement(self, s, k):
        """
        Finds the length of the longest substring with the same letters after
        making at most k replacements of any letter in the substring.

        :param s: Input string
        :param k: Maximum number of characters that can be replaced
        :return: Length of the longest valid substring
        """
        # Dictionary to store the frequency of characters in the current window
        window_char_count = {}
        max_len = 0  # Length of the longest valid substring found
        max_char_freq = 0  # Frequency of the most frequent character in the window
        window_start = 0  # Start index of the current window

        for window_end in range(len(s)):
            # Update the count for the current character
            current_char = s[window_end]
            window_char_count[current_char] = window_char_count.get(current_char, 0) + 1

            # Update the max character frequency in the current window
            max_char_freq = max(max_char_freq, window_char_count[current_char])

            # If the window size minus the most frequent character count is greater than k, shrink the window
            if (window_end - window_start + 1) - max_char_freq > k:
                left_char = s[window_start]
                window_char_count[left_char] -= 1
                window_start += 1

            # Update the maximum length found
            max_len = max(max_len, window_end - window_start + 1)

        print(window_char_count)