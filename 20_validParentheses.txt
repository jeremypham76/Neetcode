class Solution(object):
    def isValid(self, s):
        """
        :type s: str
        :rtype: bool
        """
        # Define a mapping of closing brackets to their corresponding opening brackets
        bracket_map = {
            '}': '{',
            ']': '[',
            ')': '(',
        }
        
        # Initialize an empty stack
        stack = []
        
        # Iterate through each character in the input string 's'
        for char in s:
            # If it's an opening bracket, push it onto the stack
            if char in bracket_map.values():
                stack.append(char)
            # If it's a closing bracket
            elif char in bracket_map:
                # Check if the stack is empty or if the top of the stack doesn't match
                # the corresponding opening bracket for the current closing bracket
                if not stack or stack.pop() != bracket_map[char]:
                    return False
        
        # After processing all characters, the stack should be empty if the string is valid
        return not stack