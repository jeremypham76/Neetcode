# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def hasCycle(self, head: Optional[ListNode]) -> bool:
        # Check if the linked list is empty or has only one node
        if not head or not head.next:
            return False

        # Initialize two pointers, slow and fast
        slow = head
        fast = head.next

        # Iterate until slow and fast pointers meet (cycle) or fast reaches the end
        while slow != fast:
            # Check if fast or fast.next is None (reached the end of the linked list)
            if not fast or not fast.next:
                return False

            # Move the slow pointer by one step
            slow = slow.next

            # Move the fast pointer by two steps
            fast = fast.next.next

        # If the loop breaks, it means there is a cycle in the linked list
        return True
        