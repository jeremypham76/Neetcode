class Solution:
    def carFleet(self, target: int, position: List[int], speed: List[int]) -> int:
        # Create a dictionary to map positions to speeds
        # O(n)
        d = {position[i]: speed[i] for i in range(len(position))}
        
        # Sort positions in reverse order based on current positions
        # O(n log n)
        position.sort(reverse=True)
        
        # Update the speed list based on the sorted positions
        speed = [d[pos] for pos in position]

        # Initialize a stack to store time-to-reach-target values
        fleet_stack = [(target - position[0]) / speed[0]]

        # Iterate through the rest of the cars
        # O(n)
        for i in range(1, len(position)):
            # Calculate the time it takes for the current car to reach the target
            time = (target - position[i]) / speed[i]

            # Check if the time for the current car is less than or equal to the time of the car in front
            if time <= fleet_stack[-1]:
                # If so, continue to the next car without adding it to the fleet
                continue
            else:
                # Otherwise, add the time to the fleet stack
                fleet_stack.append(time)

        # The length of the fleet stack represents the number of car fleets
        return len(fleet_stack)