class Solution:
    def isBalanced(self, root: Optional[TreeNode]) -> bool:
        def check_height(node):
            if not node:
                return 0
            
            left_height = check_height(node.left)
            right_height = check_height(node.right)
            
            # Check if the subtree is balanced
            if left_height == -1 or right_height == -1 or abs(left_height - right_height) > 1:
                return -1
            
            # Return the height of the subtree
            return max(left_height, right_height) + 1
        
        return check_height(root) != -1