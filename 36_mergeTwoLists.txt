# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next

class Solution:
    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:
        # Create a dummy node to simplify the code
        mergedList = ListNode()
        # Initialize 'current' to the dummy node
        current = mergedList

        while list1 is not None and list2 is not None:
            # Compare the values of the current nodes in list1 and list2
            if list1.val <= list2.val:
                # Add the smaller node to the merged list
                current.next = list1
                # Move to the next node in list1
                list1 = list1.next
            else:
                # Add the smaller node to the merged list
                current.next = list2
                # Move to the next node in list2
                list2 = list2.next
            
            # Move to the next node in the merged list
            current = current.next

        # Handle the case where one of the lists is not yet exhausted
        if list1 is not None:
            current.next = list1
        elif list2 is not None:
            current.next = list2

        # 'mergedList.next' points to the head of the merged list
        return mergedList.next