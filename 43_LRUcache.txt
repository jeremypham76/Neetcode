class LRUCache:
    def __init__(self, capacity: int):
        # Initialize the LRUCache with the specified capacity
        self.capacity = capacity
        # Use an OrderedDict to store the key-value pairs.
        # OrderedDict maintains the order of insertion.
        self.cache = OrderedDict()

    def get(self, key: int) -> int:
        if key in self.cache:
            # If the key exists in the cache, move it to the end to mark it as the most recently used
            self.cache.move_to_end(key)
            # Return the value corresponding to the key
            return self.cache[key]
        # If the key is not present in the cache, return -1
        return -1

    def put(self, key: int, value: int) -> None:
        if key in self.cache:
            # If the key exists, update its value and move it to the end to mark it as the most recently used
            self.cache[key] = value
            self.cache.move_to_end(key)
        else:
            # If the key doesn't exist:
            if len(self.cache) >= self.capacity:
                # If the cache is full, evict the least recently used key (the first key in OrderedDict)
                self.cache.popitem(last=False)
            # Add the new key-value pair to the cache
            self.cache[key] = value


# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)