class Solution:
    def search(self, nums: List[int], target: int) -> int:
        # Initialize the search boundaries
        left, right = 0, len(nums) - 1
        
        # Perform binary search until the search space is exhausted
        while left <= right:
            # Calculate the mid index
            mid = (left + right) // 2
            
            # Check if the mid element is equal to the target
            if nums[mid] == target:
                return mid
            
            # If the left half is sorted
            if nums[left] <= nums[mid]:
                # Check if the target is in the left half
                if nums[left] <= target < nums[mid]:
                    # Adjust the right boundary to focus on the left half
                    right = mid - 1
                else:
                    # Adjust the left boundary to focus on the right half
                    left = mid + 1
            # If the right half is sorted
            else:
                # Check if the target is in the right half
                if nums[mid] < target <= nums[right]:
                    # Adjust the left boundary to focus on the right half
                    left = mid + 1
                else:
                    # Adjust the right boundary to focus on the left half
                    right = mid - 1
        
        # If the target is not found, return -1
        return -1
