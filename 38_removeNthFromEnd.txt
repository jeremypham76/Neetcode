# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next

class Solution:
    def removeNthFromEnd(self, head: Optional[ListNode], n: int) -> Optional[ListNode]:
        # Create a dummy node to handle cases where the head needs to be removed.
        dummy = ListNode(0)
        dummy.next = head

        # Initialize two pointers, slow and fast, both pointing to the dummy node.
        slow = fast = dummy

        # Move the fast pointer n+1 steps ahead to create a gap of n nodes between slow and fast.
        for _ in range(n + 1):
            fast = fast.next

        # Move both pointers until the fast pointer reaches the end.
        while fast is not None:
            slow = slow.next
            fast = fast.next

        # Remove the nth node from the end by updating the next pointer of the node before it.
        slow.next = slow.next.next

        # Return the updated head of the linked list.
        return dummy.next