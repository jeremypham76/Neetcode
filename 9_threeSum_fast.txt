class Solution(object):
    def threeSum(self, nums):
        result=set()
        pos, neg, zero =[], [], []

        # Separate positive , negative and zero's from given list
        for number in nums:
            if number==0:
                zero.append(number)
            elif number<0:
                neg.append(number)
            else:
                pos.append(number)
       
        # Creating sets for positive and negative numbers to avoid duplicates
        pos_set, neg_set =set(pos), set(neg)
       
        # If there is atleast 1 zero, then return triplet as (0,-num,num) if same number is present in positive and negative set  i.e. 0,-1,1
        if zero:
            for number in pos:
                if -1*number in neg:
                    result.add((0,-1*number,number))
       
        # If there are atleast 3 zero's, then return triplet as (0,0,0)
        if len(zero)>=3:
            result.add((0,0,0))
       
        # For all pairs of negative numbers, check if there is compliment present in pos_set  i.e. if -1.-1 then check for 2 in pos_set
        for i in range(len(neg)):
            for j in range(i+1,len(neg)):
                target=-1*(neg[i]+neg[j])
                if target in pos_set:
                    result.add(tuple(sorted((neg[i],neg[j],target))))
       
        # for all pairs of positive numbers, check if there is compliment present in neg_set i.e. if 1,1 then check for -2 in neg_set
        for i in range(len(pos)):
            for j in range(i+1,len(pos)):
                target=-1*(pos[i]+pos[j])
                if target in neg_set:
                    result.add(tuple(sorted((pos[i],pos[j],target))))

        return (result)    